import java.io.*;
import java.util.*;

/**
 * ğŸ“Œ Problem: Sum of Subarrays
 *
 * Given an array, answer queries of the form [i, j]: 
 * Print the sum of elements from A[i] to A[j], inclusive.
 *
 * ğŸ”¹ Input:
 * - N: Size of array
 * - A: Array of integers
 * - Q: Number of queries
 * - Each query: two integers i and j (0-based)
 *
 * ğŸ”¹ Output:
 * - For each query, print the sum of A[i] to A[j]
 *
 * ğŸ”¹ Constraints:
 * 1 <= N, Q <= 500000
 * -10^9 <= A[i] <= 10^9
 * 0 <= i <= j <= N - 1
 *
 * ğŸ”¹ Example:
 * Input:
 * 10
 * 1 30 13 -4 -5 12 -53 -12 43 100
 * 4
 * 0 5
 * 1 7
 * 2 3
 * 7 9
 *
 * Output:
 * 47
 * -19
 * 9
 * 131
 */

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringBuilder res = new StringBuilder();

        int n = Integer.parseInt(br.readLine());
        long[] a = new long[n];
        String[] ip = br.readLine().split(" ");
        for (int i = 0; i < n; i++) {
            a[i] = Long.parseLong(ip[i]);
        }

        // Prefix sum array
        long[] pre = new long[n];
        pre[0] = a[0];
        for (int i = 1; i < n; i++) {
            pre[i] = pre[i - 1] + a[i];
        }

        int q = Integer.parseInt(br.readLine());
        for (int t = 0; t < q; t++) {
            String[] que = br.readLine().split(" ");
            int i = Integer.parseInt(que[0]);
            int j = Integer.parseInt(que[1]);

            long sum = pre[j] - (i > 0 ? pre[i - 1] : 0);
            res.append(sum).append("\n");
        }

        System.out.print(res);
    }
}
