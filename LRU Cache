import java.io.*;
import java.util.*;

/**
 * ðŸ“Œ Problem: LRU Cache (Least Recently Used)
 *
 * Given a list of page accesses and a cache of size K, simulate the LRU cache mechanism.
 * When the cache is full and a new page needs to be inserted, evict the least recently used page.
 *
 * ðŸ”¹ Input:
 * T - Number of test cases.
 * For each test case:
 *   N K - Number of pages and cache size
 *   N space-separated integers - page numbers
 *
 * ðŸ”¹ Output:
 * For each test case, print the contents of the cache from least to most recently used.
 *
 * ðŸ”¹ Constraints:
 * 1 <= T <= 1000
 * 1 <= N, K <= 5000
 * 1 <= page[i] <= 100000
 *
 * ðŸ”¹ Example:
 * Input:
 * 3
 * 5 3
 * 3 8 2 8 1
 * 8 5
 * 4 7 3 10 7 8 5 3
 * 10 5
 * 6 5 6 2 3 14 2 1 10 10
 *
 * Output:
 * 2 8 1
 * 10 7 8 5 3
 * 3 14 2 1 10
 */

public class Main {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine());

        while (t-- > 0) {
            String[] params = br.readLine().split(" ");
            int n = Integer.parseInt(params[0]);
            int k = Integer.parseInt(params[1]);

            String[] pageInput = br.readLine().split(" ");
            LRUCache cache = new LRUCache(k);

            for (String p : pageInput) {
                int page = Integer.parseInt(p);
                cache.accessPage(page);
            }

            List<Integer> result = cache.getCacheState();
            System.out.println(String.join(" ", result.stream().map(String::valueOf).toArray(String[]::new)));
        }
    }

    /**
     * ðŸ“˜ LRUCache class using LinkedHashMap with accessOrder=true.
     */
    static class LRUCache {
        private final int capacity;
        private final LinkedHashMap<Integer, Integer> map;

        public LRUCache(int capacity) {
            this.capacity = capacity;
            this.map = new LinkedHashMap<>(capacity, 0.75f, true); // true => access order
        }

        public void accessPage(int page) {
            map.put(page, page);
            if (map.size() > capacity) {
                // Remove least recently used (eldest)
                Iterator<Map.Entry<Integer, Integer>> it = map.entrySet().iterator();
                if (it.hasNext()) {
                    it.next();
                    it.remove();
                }
            }
        }

        public List<Integer> getCacheState() {
            return new ArrayList<>(map.keySet());
        }
    }
}
